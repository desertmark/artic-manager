require('dotenv').config()
console.log(process.env.NODE_ENV);
const initMongoose = require('../config/mongoose');
const articlesUtil = require('../util/articles');
initMongoose();

var   articlesJSON = require('./sanita.json');
const Article = require('../articles/articles');
const Category = require('../categories/categories');
const _ = require('lodash');
require('../util');

const actionIx = process.argv.findIndex(x => x === '-action');
if(actionIx === -1) {
    throw Error('No action parameter passed. Use -action to pass an action [deleteAll | insertAll | count]');
    process.exit(1);
} 
const action = process.argv[actionIx + 1];
console.log('executing action: ', action);
if(!action) {
    throw Error('No action value passed. Use -action to pass an action [deleteAll | insertAll | count]');
    process.exit(1);
}
switch(action) {
    case 'deleteAll':
        Article.deleteMany()
        .then(() => {
            Category.deleteMany().then(() => {
                console.log('All items Deleted');
                process.exit(0);
            })
        })
        .catch(handleError);
        break;
    case 'insertAll': 
        insertAll()
        .then(insertedArticles => {
            process.exit(0);
        })
        .catch(handleError);
        break;
    case 'count':
        Promise.all([
            Article.count()
            .then(count => {
                console.log(`${count} Articles stored in the DB`);
            }),
            Category.count()
            .then(count => {
                console.log(`${count} Categories stored in the DB`);
            })
        ])
        .then(() => process.exit(0))
        .catch(handleError);
        break;
    default:
        console.log('Unknown Action');
        process.exit(0);
}


function handleError(error) {
    console.log(error);
    process.exit(0);
}

function insertAll() {
    const articles = mapArticlesJSONToArticlesModel(articlesJSON);
    return createAndInsertCategories(articles)
    .then(insertedCategories => {
        return createAndInsertArticles(articles, insertedCategories)
    })
    .catch(handleError);
}

/**
 * Map all categories descriptions comming from sanita to objects 
 * ```
 * {
 *  description:"a description"
 * }
 * ```
 * And insert them in the DB.
 */
function createAndInsertCategories(articles) {
    articles = articles.map(x =>  {
        x.cleanCategoryDescription = x.categoryDescription.cleanSpaces().capitalize();
        return x;
    });
    const categoriesToInsert = _.uniq(articles.map(cat => cat.cleanCategoryDescription)).map(cat => {
        return {
            description: cat
        }
    });
    return Category.insertMany(categoriesToInsert).then(insertedCategories => {
        console.log('Categories Inserted: ', insertedCategories.length)
        return insertedCategories
    });
}


/**
 * Replace all the ``categoryDescription`` properties by ``categoryId`` generated by mongoDB and insert articles in the DB.
 * Replace this:
 * ```
 * {
 *  ...
 *  categoryDescription:"a description"
 *  ...
 * }
 * ```
 * by
 * 
 * ```
 * {
 *  ...
 *  category: "a mongoDB ObjectId"
 *  ...
 * }
 * ```
 */
function createAndInsertArticles(articles, categories) {
    const articlesToInsert = mapCategoryDescriptionToCategoryId(articles, categories);
    return Article.insertMany(articlesToInsert).then(insertedArticles => {
        console.log('Articles Inserted: ', insertedArticles.length);
        return insertedArticles
    })
}

/**
 * Replace this:
 * ```
 * {
 *  ...
 *  categoryDescription:"a description"
 *  ...
 * }
 * ```
 * by
 * 
 * ```
 * {
 *  ...
 *  category: "a mongoDB ObjectId"
 *  ...
 * }
 * ```
 */
function mapCategoryDescriptionToCategoryId(articles, categories) {
    const mappedArticles = articles.map(art => {
        art.category = categories.find(cat => cat.description === art.cleanCategoryDescription)._id || undefined;
        return art;
    });
    return mappedArticles;
}

function mapArticlesJSONToArticlesModel(articlesJSON) {
    return articlesJSON.map(art => {
        art.codeString = art.code;
        art.code = parseInt(art.code.replace(/[.]/g,''));
        art.card = art.card/100;
        art.transport = art.transport/100;
        art.utility = +(art.utility - 1).toFixed(2);
        art.vat = art.vat / 100;
        art.discounts = [
            {
                description:'Bonificacion',
                amount: art.bonus/100
            },
            {
                description:'Bonificacion 2',
                amount: art.bonus2/100
            },
            {
                description:'Descuento de caja',
                amount: art.cashDiscount/100
            },
            {
                description:'Descuento de caja 2',
                amount: art.cashDiscount2/100
            }
        ];
        art.cardPrice = articlesUtil.cardPrice(art.price, art.card);
        return art;
    });
}